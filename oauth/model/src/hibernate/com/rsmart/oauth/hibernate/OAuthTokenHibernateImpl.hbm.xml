<?xml version="1.0"?>
<!--
  ~ Copyright 2011 The rSmart Group
  ~
  ~ The contents of this file are subject to the Mozilla Public License
  ~ Version 1.1 (the "License"); you may not use this file except in
  ~ compliance with the License. You may obtain a copy of the License at
  ~ http://www.mozilla.org/MPL/
  ~
  ~ Software distributed under the License is distributed on an "AS IS"
  ~ basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  ~ License for the specific language governing rights and limitations
  ~ under the License.
  ~
  ~ Contributor(s): duffy
  -->

<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 2.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" >

<hibernate-mapping>
<!--  CLE-4652 - had to eliminate encryption so as not to require alteration of JVM to enable Unlimited Strength Encryption (non-export)
    <typedef name="encrypted" class="org.jasypt.hibernate.type.EncryptedStringType">
        <param name="algorithm">PBEWithMD5AndDES</param>
        <param name="password">jasypt</param>
        <param name="keyObtentionIterations">1000</param>
    </typedef>
-->

    <class name="com.rsmart.oauth.hibernate.OAuthTokenHibernateImpl" table="oauth_token" lazy="false">
        
		<id name="UUID" length="36" type="java.lang.String" column="uuid">
			<generator class="uuid.hex" />
		</id>

        <many-to-one name="provider" class="com.rsmart.oauth.hibernate.OAuthProviderHibernateImpl"
            column="providerUUID" not-null="true" fetch="join" lazy="false" unique-key="unq_token"
            cascade="all"/>

        <property name="userId" type="java.lang.String" column="userId"
            not-null="true" length="99" unique-key="unq_token"/>

        <property name="tokenValue" type="java.lang.String" column="oAuthToken"
            not-null="true" length="100" />

        <property name="tokenSecret" type="java.lang.String" column="oAuthTokenSecret"
            not-null="false" length="100" />

        <property name="protocolVersion" type="java.lang.String" column="protocolVersion"
                  not-null="false" length="10" />
<!--  CLE-4652 - had to eliminate encryption so as not to require alteration of JVM to enable Unlimited Strength Encryption (non-export)
        <property name="tokenValue" type="encrypted" column="oAuthToken"
            not-null="true" length="100" />

        <property name="tokenSecret" type="encrypted" column="oAuthTokenSecret"
            not-null="true" length="100" />
-->

    </class>

    <query name="query.tokenByProviderUser">
        from OAuthTokenHibernateImpl as token
            where token.provider.UUID = ?
              and token.userId = ?
    </query>

    <query name="query.deleteTokenById">
        delete from OAuthTokenHibernateImpl as token
            where token.UUID = ?
    </query>

    <query name="query.deleteTokensByUserId">
        delete from OAuthTokenHibernateImpl as token
            where token.userId = ?
    </query>

    <query name="query.tokensByProvider">
        from OAuthTokenHibernateImpl as token
            where token.provider.UUID = ?
    </query>

    <query name="query.tokensByUser">
        from OAuthTokenHibernateImpl as token
            where token.userId = ?
    </query>

    <query name="query.deleteTokenByProviderID">
        delete from OAuthTokenHibernateImpl as token
            where token.provider.UUID = ?
    </query>
    <query name="query.deleteTokensById">
          delete from OAuthTokenHibernateImpl as token where
          token.UUID in (:list) 

    </query>

</hibernate-mapping>
