<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" 
	"http://www.springframework.org/dtd/spring-beans.dtd">

<!-- This file generated by Sakai App Builder -AZ -->
<beans>

	<!-- read in the hibernate.properties file properties -->
	<bean id="testPropertiesConfigurer" 
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/hibernate.properties</value>
			</list>
		</property>
	</bean>

    <!-- define the list of HBM mapping files -->
    <bean id="oauth.hbmMappingList" class="java.util.ArrayList">
        <constructor-arg>
            <list>
                <value>com/rsmart/oauth/hibernate/OAuthProviderHibernateImpl.hbm.xml</value>
                <value>com/rsmart/oauth/hibernate/OAuthTokenHibernateImpl.hbm.xml</value>
            </list>
        </constructor-arg>
    </bean>

    <!-- create a data source (use the name Sakai uses) -->
    <bean id="javax.sql.DataSource" 
            class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName"><value>${hibernate.connection.driver_class}</value></property>
        <property name="url"><value>${hibernate.connection.url}</value></property>
        <property name="username"><value>${hibernate.connection.username}</value></property>
        <property name="password"><value>${hibernate.connection.password}</value></property>
    </bean>

   <!-- create a SessionFactory bean from the data source and point it at our HBMs,
      name it the same as the Sakai global one so we can reuse our other spring files -->
   <bean id="org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory"
      class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
      <property name="dataSource" ref="javax.sql.DataSource" />
      <property name="mappingResources" ref="oauth.hbmMappingList"/>
      <property name="hibernateProperties">
         <props>
            <prop key="hibernate.dialect">${hibernate.dialect}</prop>
            <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
            <prop key="hibernate.query.substitutions">true 1, false 0</prop>
            <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
         </props>
      </property>
   </bean>

   <!-- Create a transaction manager from the SessionFactory,
      name it the same as the Sakai one so we can reuse our other spring config files -->
   <bean id="org.sakaiproject.springframework.orm.hibernate.GlobalTransactionManager"
      class="org.springframework.orm.hibernate3.HibernateTransactionManager">
      <property name="sessionFactory"
         ref="org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory" />
   </bean>

   <bean id="com.rsmart.oauth.hibernate.OAuthTokenServiceHibernateImpl"
       class="com.rsmart.oauth.hibernate.OAuthTokenServiceHibernateImpl">
      <property name="sessionFactory" ref="org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory"/>    
   </bean>

   <bean id="rsasha1testkey" class="java.lang.String">
       <constructor-arg type="java.lang.String">
           <value>
               <![CDATA[-----BEGIN PRIVATE KEY-----
MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAM7g9BCp7oAE1/Z1
p00RZ4VaIOHtVRjCrELJ0QHZWj2aoKsgFiLrCSy7jYrj3JN/bY9hGiaWbwEI0ZUg
F3fxDn7A+Ap/7Q0ur0JStuB873jT3uJL/JVaEFYRIkrq0aUO0D07+hEs3K+FTWsU
+v3fSSTzEUoLaWk0tzScdWMS6bXdAgMBAAECgYEAhkQNYvtG5SM/np9BU41mKHAU
Q00rG4TNFBOzaIXOQYknmaibdVIhhDy9YlT8hWYAjzuwIzcjGALHMwe+84MpqgIH
imG2KKAvskJTG20+lgwuHKdwavKVrQbV3IakDA2XaLzhRqQm1t9duVKvSAkmY9Fo
JuNHd6avH8Ct0mBpzikCQQD+oacn6t10ZhZ817YsuaeIS56+TItoeSsuZXefCFyt
Z+E3mTPkJKWMQ+pdV3Eec32KiYpK2nLvxHlD8K2KtMK3AkEAz/2Y9oa0V4p1phlX
+zCV5d67yTfkFHihgvA6omRhfiTsfRPdJJ8s7aJTawRZuVhBFFEMlyvvvn9Zthyp
y01oCwJALGDEH0Lhwc2hEbUOvRDGUAzN5+CzU0v66KUqif8NF/PI3sXGs3Znm+Ci
Ug5RWrtKIAEEpzMXYQ5fDCZAOLJ0VQJAB9rQ6wZ9Sw0MkmBEpVTZZFv8BYZZ07gW
iWZfIIDf+a6VS8fzQw3L2ZGWyuTYKpq9onHJIvBi1nPixHDirK3YrwJAHEZ+NLsr
C7bQx32YyhRZ3kPiQZANLXVpq6/ImfexPuxLL94Z+YcuRB0pDpQhEOJOnzVJGwIm
lBhKBLtKF5k4LQ==
-----END PRIVATE KEY-----]]>
           </value>
       </constructor-arg>
   </bean>

    <bean id="rsasha1testcert" class="java.lang.String">
        <constructor-arg type="java.lang.String">
            <value>
                <![CDATA[-----BEGIN CERTIFICATE-----
MIICeDCCAeGgAwIBAgIJAMb2wJZ40FHZMA0GCSqGSIb3DQEBBQUAMFUxCzAJBgNV
BAYTAlVTMQswCQYDVQQIDAJBWjEQMA4GA1UEBwwHUGhvZW5peDEnMCUGA1UEAwwe
Z29vZ2xldGVzdC55b3VyaW5zdGl0dXRpb24uZWR1MB4XDTEwMTIyMjIzMDMwOFoX
DTExMTIyMjIzMDMwOFowVTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkFaMRAwDgYD
VQQHDAdQaG9lbml4MScwJQYDVQQDDB5nb29nbGV0ZXN0LnlvdXJpbnN0aXR1dGlv
bi5lZHUwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAM7g9BCp7oAE1/Z1p00R
Z4VaIOHtVRjCrELJ0QHZWj2aoKsgFiLrCSy7jYrj3JN/bY9hGiaWbwEI0ZUgF3fx
Dn7A+Ap/7Q0ur0JStuB873jT3uJL/JVaEFYRIkrq0aUO0D07+hEs3K+FTWsU+v3f
SSTzEUoLaWk0tzScdWMS6bXdAgMBAAGjUDBOMB0GA1UdDgQWBBTqRseZZTy3dslk
Nuo8TdBE+dVrcTAfBgNVHSMEGDAWgBTqRseZZTy3dslkNuo8TdBE+dVrcTAMBgNV
HRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBAE/jq6xKdR3vk8q2WDBg2G4kvi5Y
M0XvPkQi3eafaOAx5XQHeMGpnbpWx+ncEzVmqtVM9sYQGsrZ7i7W148thnVXCBfF
3sPY6BviwYp5hZu9IZXbsqfGBY5jVez5GHAC8j41yVQG2+z4kRfvL+o6DIRttR/k
FNtltQwcgQYhtjT7
-----END CERTIFICATE-----]]>
            </value>
        </constructor-arg>
    </bean>

</beans>
