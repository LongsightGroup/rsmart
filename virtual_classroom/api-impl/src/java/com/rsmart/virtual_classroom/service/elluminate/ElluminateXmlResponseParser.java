/***********************************************************************************
 * Copyright (c) 2005 the r-smart group, inc.
 **********************************************************************************/
package com.rsmart.virtual_classroom.service.elluminate;

import com.rsmart.virtual_classroom.model.VirtualClassroomException;
import com.rsmart.virtual_classroom.model.VirtualClassroomSession;

import java.text.SimpleDateFormat;
import java.util.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.lang.StringEscapeUtils;


import org.w3c.dom.Element;
import org.w3c.dom.Node;

import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPFault;
import javax.xml.soap.Detail;
import javax.xml.soap.DetailEntry;

import org.jaxen.JaxenException;
import org.jaxen.XPath;
import org.jaxen.dom.DOMXPath;


/**
 * The elluminate server returns responses to clients in xml documents via http.
 * Each command that is sent to the elluminate server by a client returns the result of executing that command in an xml document.
 * The structure of the xml response depends on the information that the elluminate server needs to return.
 * Since there are many elluminate server commands and hence many corresponding xml responses, this utility class was
 * constructed in order to remove the details of parsing the responses from the client.
 */
public class ElluminateXmlResponseParser {
   // class members
   private static final Log              logger          = LogFactory.getLog(ElluminateXmlResponseParser.class);
   private static final String           xmlErrorMessage = "Error parsing the xml document returned from the elluminate server.  ";
   private static final SimpleDateFormat dateFormatter   = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss z");   // elluminate server expects dates in this format



   /**
    * default constructor.
    */
   public ElluminateXmlResponseParser() {
   }

   /**
    * extracts the meeting values from the xml document returned from the elluminate server after executing the createMeeting() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * if the elluminate server can create the meeting it will return xml in the form of:
    *
    *     <Results>
    *       <Collection>
             <Entry>
               <MeetingAdapter>
                 <Id>1229731330731</Id>
                 <FacilitatorId>1</FacilitatorId>
                 <Deleted>false</Deleted>
                 <PrivateMeeting>false</PrivateMeeting>
                 <Name>asdfasdf asdfas</Name>
                 <Password />
                 <Adapter>default</Adapter>
                 <Start>1229734800000</Start>
                 <End>1229738400000</End>
               </MeetingAdapter>
             </Entry>
           </Collection>
         </Results>

    * where <i>id</i> is the unique id generated by the elluminate server when creating the meeting.
    * <p>
    * otherwise, if the elluminate server fails to create the meeting, it will return xml an error message.
    * see extractErrorMessage for the format of the xml response.
    * </p>
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the meeting can not be created on the elluminate live virtual classroom server.
    *                                     If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return VirtualClassroomSession  the newly created meeting.
    */
   public   VirtualClassroomSession extractCreateMeetingResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractCreateMeetingResult()");

      VirtualClassroomSession meeting = null;
      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to create the meeting.  " + extractErrorMessage(body.getFault()));
      }

      meeting = extractMeeting(body);

      return meeting;
   }

   /**
    * extracts the jnlp url from the xml document returned from the elluminate server after executing the createMeetingUrl() command.
    * The jnlp url will allow a user to join the elluminate meeting.
    * <p>
    * The xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * if the elluminate server can create the meeting it will return xml in the form of:
    *
    * <results>
    *    <jnlp>http://localhost:2189/service.html?command=JSxLLHLAZVASVUKHExRIxRGxSKx&meetingId=YTxOTxPCxPYxETxPZxETxYIxOSxPMxFKxZLxZNx&userName=OJx&adapter=BBPTHxBARJRxBKFTFxTHxLUATRxBVCBBGLUBLBY</jnlp>
    * </results>
    * </code>
    * </p>
    * <p>
    * otherwise, if the elluminate server fails to create the meeting, it will return xml an error message.
    * see extractErrorMessage for the format of the xml response.
    * </p>
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the jnlp meeting url can not be created and retrieved from the elluminate live virtual classroom server.
    *                                     If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return String   the url which will allow a user to join a meeting.
    */
   public  String extractCreateMeetingUrlResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractCreateMeetingUrlResult()");

      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to retrieve the meeting url:  " + extractErrorMessage(body.getFault()));
      }

      String jnlpUrl = null;     
      jnlpUrl = body.getValue();
      return jnlpUrl;
   }

   /**
    * extracts the result from the xml document returned from the elluminate server after executing the createUser() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * if the elluminate server can retrieve the user id it will return xml in the form of:
    * <results>
    *    <userId>0</userId>
    * </results>
    * </code>
    *
    * otherwise, if the elluminate server fails to retrieve the meeting, it will return xml an error message.
    * see extractErrorMessage for the format of the xml response.
    * <br/><br/>
    * @param document  jdom document containing the xml from which the user id is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the result can not be retrieved from the elluminate server.
    *                                     If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    */
   public  void extractCreateUserResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractCreateUserResult()");

      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to create the user. " + extractErrorMessage(body.getFault()));
      }

   }

   /**
    * extracts the meeting values from the xml document returned from the elluminate server after executing the removeMeeting() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * if the elluminate server can delete the meeting it will return xml in the form of:
    *
    * <Results><MeetingAdapter><Id>1230015944630</Id><FacilitatorId>1</FacilitatorId>
    * <Deleted>false</Deleted><PrivateMeeting>false</PrivateMeeting><Name>test-admin3</Name>
    * <Password/><Adapter>default</Adapter>
    * <Start>1230019200000</Start><End>1230022800000</End></MeetingAdapter></Results>
    * </code>
    *
    * <br/><br/>
    * @param body  node containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the meeting can not be created on the elluminate live virtual classroom server.
    *                                     If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return VirtualClassroomSession  the deleted meeting.
    */
   public  VirtualClassroomSession extractDeleteMeetingResult(SOAPBody meetingNode) throws VirtualClassroomException {
      logger.info("extractDeleteMeetingResult()");

      if (meetingNode.hasFault()) {
         throw new VirtualClassroomException("Unable to delete the meeting. " + extractErrorMessage(meetingNode.getFault()));
      }
      return extractCreateMeetingResult(meetingNode);
   }

   /**
    * extracts the meeting values from the xml document returned from the elluminate server after executing the removeMeeting() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * if the elluminate server can delete the meeting it will return xml in the form of:
    *
    * <Results>
    * <Collection>
    * <Entry><RecordingAdapter><Id>1230001642631_1230001644748</Id>
    * <MeetingRoomId>1230001642631</MeetingRoomId><RoomName>test</RoomName><Facilitator/>
    * <Version>8.0</Version><Keywords/><CreationDate>1230001644748</CreationDate><Open>true</Open>
    * <Size>31228</Size><Data/></RecordingAdapter>
    * </Entry>
    * </Collection>
    * </Results>
    *
    * </code>
    * where <i>meeting id</i> is the unique id of the meeting.
    *
    * otherwise, if the elluminate server fails to delete the meeting, it will return xml an error message.
    * see extractErrorMessage for the format of the xml response.
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the meeting can not be created on the elluminate live virtual classroom server.
    *                                     If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return VirtualClassroomSession  the deleted recording.
    */
   public  VirtualClassroomSession extractDeleteRecordingResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractDeleteRecordingResult()");

      VirtualClassroomSession recording = null;
      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to delete the recording. " + extractErrorMessage(body.getFault()));
      }

      recording = extractRecording(body);
      return recording;
   }

   /**
    * extracts an error message from the xml response returned by the elluminate server.
    * This method expects the xml to be in the form:
    * @param fault   SOAPFault in the xml response returned by the elluminate server.
    *
    */
   private  String extractErrorMessage(SOAPFault fault) {
      logger.debug("extractErrorMessage()");

      StringBuffer errorMessage = new StringBuffer();
      String actor = fault.getFaultActor();

      errorMessage.append("SOAP fault contains: ");
      errorMessage.append("  Fault code = " + fault.getFaultCode());
      errorMessage.append("  Local string = " + fault.getFaultString());

      
      if (actor != null) {
         System.out.println("  Fault actor = " + actor);
      }
      Detail detail = fault.getDetail();
      for (Iterator i = detail.getDetailEntries(); i.hasNext();) {
         DetailEntry detailEntry = (DetailEntry) i.next();
         errorMessage.append("Detail entry = " + detailEntry.getValue());
      }

      return errorMessage.toString();
   }

   /**
    * extracts the meeting values from the xml document returned from the elluminate server after executing the getMeeting() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * if the elluminate server can retrieve the meeting it will return xml in the form of:
    *
    * <results>
    *    <meeting>
    *       <id>[meeting id]</id>
    *       <name>jonerics_meeting</name>
    *       <startDate>13/04/2006 09:00:00 MST</startDate>
    *       <endDate>13/04/2006 10:00:00 MST</endDate>
    *       <private>true</private>
    *    </meeting>
    * </results>
    * </code>
    * where <i>meeting id</i> is the unique id generated by the elluminate server when creating the meeting.
    *
    * otherwise, if the elluminate server fails to retrieve the meeting, it will return xml an error message.
    * see extractErrorMessage for the format of the xml response.
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the meeting can not be retrieved from the elluminate live virtual classroom server.
    *                                     If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return VirtualClassroomSession  the meeting retrieved from the elluminate server.
    */
   public  VirtualClassroomSession extractGetMeetingResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractGetMeetingResult()");

      VirtualClassroomSession meeting = null;
      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to retrieve the meeting.  " + extractErrorMessage(body.getFault()));
      }

      meeting = extractMeeting(body);
      return meeting;
   }

   /**
    * extracts the user id from the xml document returned from the elluminate server after executing the getUserId() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    *
    * <Results><UserAdapter><Id>1</Id><LoginName>serversupport</LoginName><LoginPassword />
    * <FirstName>Server</FirstName><LastName>Support</LastName><Email>serversupport</Email>
    * <Deleted>false</Deleted><Role><RoleAdapter><RoleId>0</RoleId></RoleAdapter></Role></UserAdapter>
    * </Results>
    *
    * otherwise, if the elluminate server fails to retrieve the user id, it will return xml an error message like the following
    *
    * <m:requestResponse xmlns:m="http://www.soapware.org/"><SOAP:Fault><SOAP:Code><SOAP:Value>ELM Web Services Error</SOAP:Value>
    * </SOAP:Code><SOAP:Reason><SOAP:Text xml:lang="en-US">Unable to complete the adapter process() successfully.</SOAP:Text>
    * </SOAP:Reason><SOAP:Detail><SOAP:Success>false</SOAP:Success><SOAP:Stack>
    * <SOAP:Trace>Unable to complete the adapter process() successfully.</SOAP:Trace>
    * <SOAP:Trace>Unable to process service call : com.elluminate.service.adapter.DefaultServiceCall@296020</SOAP:Trace>
    * <SOAP:Trace>Unable to locate the user specified</SOAP:Trace>
    * <SOAP:Trace>DAO exception occured during get attempt, unable to find user!</SOAP:Trace>
    * <SOAP:Trace>Error attempting to retrieve a row for : {loginName=Sakai Administrator}</SOAP:Trace>
    * <SOAP:Trace>Unable to build a row when resultset is empty!</SOAP:Trace></SOAP:Stack></SOAP:Detail>
    * </SOAP:Fault></m:requestResponse></SOAP:Body></SOAP:Envelope>
    * <br/><br/>
    * @param document  jdom document containing the xml from which the user id is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the user id can not be retrieved from the elluminate server.
    *                                     If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return long   if the user exists, then the user id retrieved from the elluminate server is returned.  Otherwise, -1.
    */
   public  String extractGetUserIdResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractGetUserIdResult()");

      if (body.hasFault()) {
         throw new VirtualClassroomException("User id not found.  " + extractErrorMessage(body.getFault()));
      }

      try {
         return getNodeValue("//Id",body);
      } catch(Exception e) {
         return null;
      }
   }

   /**
    * extracts the url of the elluminate help from the xml document returned from the elluminate server after executing the helpUrl() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * <?xml version="1.0" encoding="UTF-8"?>
    * <results>[help url]</results>
    * </code>
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    *
    * <br/><br/>
    * @return String  url of the elluminate help.
    */
   public  String extractHelpUrlResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractHelpUrlResult()");

      if (body.hasFault()) {
         throw new VirtualClassroomException("help url not found.  " + extractErrorMessage(body.getFault()));
      }

      return body.getValue();
   }

   /**
    * extracts the url to join an elluminate meeting the xml document returned from the elluminate server after executing the createMeetingURL() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    *<Results>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!-- JNLP File for Elluminate Live! application --&gt;
&lt;jnlp
  spec=&quot;1.0+&quot;
  codebase=&quot;http://192.168.2.3:80/lib/8.0&quot;&gt;
  &lt;information&gt;
    &lt;title&gt;Elluminate Live!&lt;/title&gt;
    &lt;vendor&gt;Elluminate Inc.&lt;/vendor&gt;
    &lt;description&gt;Virtual Classroom&lt;/description&gt;
    &lt;icon href=&quot;elive128.gif&quot;/&gt;
  &lt;/information&gt;
  &lt;security&gt;
    &lt;all-permissions/&gt;
  &lt;/security&gt;
  &lt;resources os=&quot;Windows Linux SunOS Mac\ OS\ X&quot;&gt;
    &lt;property name=&quot;apple.laf.useScreenMenuBar&quot; value=&quot;true&quot;/&gt;
    &lt;property
        name=&quot;apple.awt.window.position.forceSafeProgrammaticPositioning&quot;
        value=&quot;false&quot;/&gt;
    &lt;j2se version=&quot;1.4+&quot; initial-heap-size=&quot;32m&quot; max-heap-size=&quot;96m&quot;/&gt;
    &lt;jar href=&quot;eLiveAcad.jar&quot; main=&quot;true&quot;/&gt;
    &lt;jar href=&quot;eLive.jar&quot;/&gt;
    &lt;jar href=&quot;eNet.jar&quot;/&gt;
    &lt;jar href=&quot;eNetHttp.jar&quot;/&gt;
    &lt;jar href=&quot;iText.jar&quot;/&gt;
    &lt;jar href=&quot;jdom.jar&quot;/&gt;
    &lt;jar href=&quot;JimiProClasses.jar&quot;/&gt;
    &lt;jar href=&quot;vcAppShare.jar&quot;/&gt;
    &lt;jar href=&quot;vcAudio.jar&quot;/&gt;
    &lt;jar href=&quot;vcBreakout.jar&quot;/&gt;
    &lt;jar href=&quot;vcCalculator.jar&quot;/&gt;
    &lt;jar href=&quot;vcCaption.jar&quot;/&gt;
    &lt;jar href=&quot;vcChair.jar&quot;/&gt;
    &lt;jar href=&quot;vcDirectMsg.jar&quot;/&gt;
    &lt;jar href=&quot;vcHand.jar&quot;/&gt;
    &lt;jar href=&quot;vcMultimedia.jar&quot;/&gt;
    &lt;jar href=&quot;vcNotes.jar&quot;/&gt;
    &lt;jar href=&quot;vcOnline.jar&quot;/&gt;
    &lt;jar href=&quot;vcParticipant.jar&quot;/&gt;
    &lt;jar href=&quot;vcPolling.jar&quot;/&gt;
    &lt;jar href=&quot;vcPresentation.jar&quot;/&gt;
    &lt;jar href=&quot;vcProfile.jar&quot;/&gt;
    &lt;jar href=&quot;vcQuiz.jar&quot;/&gt;
    &lt;jar href=&quot;vcRecorder.jar&quot;/&gt;
    &lt;jar href=&quot;vcStartTime.jar&quot;/&gt;
    &lt;jar href=&quot;vcTimer.jar&quot;/&gt;
    &lt;jar href=&quot;vcTransfer.jar&quot;/&gt;
    &lt;jar href=&quot;vcVideo.jar&quot;/&gt;
    &lt;jar href=&quot;vcWebPush.jar&quot;/&gt;
    &lt;jar href=&quot;vcWhiteboard.jar&quot;/&gt;
    &lt;jar href=&quot;vcImagesAcad.jar&quot;/&gt;
  &lt;/resources&gt;
  &lt;resources os=&quot;Mac\ OS\ X&quot; arch=&quot;ppc&quot;&gt;
    &lt;nativelib href=&quot;vcPlatformMacOSXppc.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAudioMacOSXppc.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcBrowserMacOSXppc.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAppShareMacOSXppc.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcPPTImportMacOSXppc.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcVideoMacOSXppc.jar&quot;/&gt;
  &lt;/resources&gt;
  &lt;resources os=&quot;Mac\ OS\ X&quot; arch=&quot;i386&quot;&gt;
    &lt;nativelib href=&quot;vcPlatformMacOSXx86.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAudioMacOSXx86.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcBrowserMacOSXx86.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAppShareMacOSXx86.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcPPTImportMacOSXx86.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcVideoMacOSXx86.jar&quot;/&gt;
  &lt;/resources&gt;
  &lt;resources os=&quot;Windows&quot;&gt;
    &lt;nativelib href=&quot;vcPlatformWin.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAudioWin.jar&quot;/&gt;
    &lt;jar href=&quot;vcBrowserWin.jar&quot;/&gt;
    &lt;jar href=&quot;vcAppShareWin.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcVideoWin.jar&quot;/&gt;
  &lt;/resources&gt;
  &lt;resources os=&quot;SunOS&quot; arch=&quot;sparc&quot;&gt;
    &lt;nativelib href=&quot;vcPlatformSolSparc.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAudioSolSparc.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAppShareSolSparc.jar&quot;/&gt;
  &lt;/resources&gt;
  &lt;resources os=&quot;SunOS&quot; arch=&quot;x86 i386&quot;&gt;
    &lt;nativelib href=&quot;vcPlatformSolX86.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAudioSolX86.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAppShareSolX86.jar&quot;/&gt;
  &lt;/resources&gt;
  &lt;resources os=&quot;Linux&quot; arch=&quot;i386 x86&quot;&gt;
    &lt;nativelib href=&quot;vcPlatformLin.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAudioLin.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcAppShareLin.jar&quot;/&gt;
    &lt;nativelib href=&quot;vcVideoLin.jar&quot;/&gt;
  &lt;/resources&gt;
  &lt;application-desc main-class=&quot;com.elluminate.live.academic.Main&quot;&gt;
    &lt;argument&gt;-url&lt;/argument&gt;
    &lt;argument&gt;jinx://192.168.2.3:2187/ELMDefault|qer#1229987932331&lt;/argument&gt;
    &lt;argument&gt;-user&lt;/argument&gt;
    &lt;argument&gt;Sakai Administrator&lt;/argument&gt;
    &lt;argument&gt;+atPQ657At12qHU1V9sJlQ==&lt;/argument&gt;
  &lt;/application-desc&gt;
&lt;/jnlp&gt;
</Results> 
    * </code>
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    *
    * <br/><br/>
    * @return String  url to join the elluminate meeting.
    */
   public  String extractJoinMeetingUrlResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractJoinMeetingUrlResult()");

      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to retrieve the jnlp url to join the meeting.  " + extractErrorMessage(body.getFault()));
      }

      return StringEscapeUtils.unescapeXml(getNodeValue("//Results",body));
   }

   /**
    * extracts the list meetings from the xml document returned from the elluminate server after executing the listMeetings() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * if the elluminate server can create the meeting it will return xml in the form of:
    *
    * <results>
    *    <meeting>
    *       <id>[meeting id]</id>
    *       <name>jonerics_meeting</name>
    *       <startDate>13/04/2006 09:00:00 MST</startDate>
    *       <endDate>13/04/2006 10:00:00 MST</endDate>
    *       <private>true</private>
    *    </meeting>
    *    ...
    *    followed by more meetings
    *    ...
    *    <meeting>
    *       ...
    *    </meeting>
    * </results>
    * </code>
    *
    * where <i>meeting id</i> is the unique id generated by the elluminate server when creating the meeting.
    *
    * otherwise, if the elluminate server fails to retrieve the list of meetings, it will return xml an error message.
    * see extractErrorMessage for the format of the xml response.
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the list of meetings can not be retrieved from the elluminate live virtual classroom server.
    *                                     If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return collection of all meetings.
    */
   public  List extractListMeetingsResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractListMeetingsResult()");

      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to retrieve the list of meetings.   " + extractErrorMessage(body.getFault()));
      }
      return new ArrayList();
   }

   /**
    * extracts the list recordings from the xml document returned from the elluminate server after executing the listRecordings() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    *
    * <Results>
    * <Collection>
    * <Entry>
    * <RecordingAdapter><Id>1230001642631_1230001644748</Id><MeetingRoomId>1230001642631</MeetingRoomId>
    * <RoomName>test</RoomName><Facilitator>1</Facilitator><Version>8.0</Version><Keywords /><CreationDate>1230001644748</CreationDate>
    * <Open>true</Open>
    * <Size>31228</Size><Data></Data>
    * </RecordingAdapter>
    * </Entry>
    * </Collection></Results>
    * </results>
    * 
    * </code>
    *
    * <br/><br/>
    * @param body  node containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the list of recordings can not be retrieved from the elluminate live virtual classroom server.
    *                                     If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return map of all recordings key'd by meetingId 
    */
   public  Map extractListRecordingsResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractListRecordingsResult()");

      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to retrieve the list of recordings.   " + extractErrorMessage(body.getFault()));
      }

      Map recordings = new HashMap();
      for (Iterator i=selectNodes("//RecordingAdapter", body).iterator();i.hasNext();) {
         Node node =(Node) i.next();
         VirtualClassroomSession vcs = extractRecording(node);
         String meetingId = String.valueOf(vcs.getElluminateId());
         if (recordings.get(meetingId) != null ){
            ((List)recordings.get(meetingId)).add(vcs);
         } else {
            List list = new ArrayList();
            list.add(vcs);
            recordings.put(meetingId, list);
         }
      }

      logger.info("extractListRecordingsResult(), retrieved " + recordings.size() + " recordings.");
      return recordings;
   }

   /**
    * extract a meeting from a section of the xml response returned from the elluminate server.
         <Results>
           <Collection>
             <Entry>
               <MeetingAdapter>
                 <Id>1229731330731</Id>
                 <FacilitatorId>1</FacilitatorId>
                 <Deleted>false</Deleted>
                 <PrivateMeeting>false</PrivateMeeting>
                 <Name>asdfasdf asdfas</Name>
                 <Password />
                 <Adapter>default</Adapter>
                 <Start>1229734800000</Start>
                 <End>1229738400000</End>
               </MeetingAdapter>
             </Entry>
           </Collection>
         </Results>
    * @param meetingNode  the jdom node for the <meeting> element within the xml response.
    * <br/><br/>
    * @throws VirtualClassroomException   If the meeting returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return  the parsed meeting.
    */
   private  VirtualClassroomSession extractMeeting(Element meetingNode) throws VirtualClassroomException {
      logger.debug("extractMeeting()");
      VirtualClassroomSession vcs = new VirtualClassroomSession();
      try {
         vcs.setElluminateId(Long.parseLong(getNodeValue("//Id",meetingNode)));
         vcs.setStartDate(new Date(Long.parseLong(getNodeValue("//Start",meetingNode))));
         vcs.setEndDate(new Date(Long.parseLong(getNodeValue("//End",meetingNode))));
         vcs.setElluminateModeratorId(getNodeValue("//FacilitatorId", meetingNode));
      } catch (Exception e) {
         throw new VirtualClassroomException("problem extracting meeting from message: " + e.getMessage(), e);
      }
      return vcs;
   }

   /**
    * extract a recording from a section of the xml response returned from the elluminate server.
    * <br/><br/>
    * @param recordingNode  the jdom node for the <recording> element within the xml response.
    * <br/><br/>
    * @throws VirtualClassroomException   If the recording returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return  the parsed recording.
    */
   private  VirtualClassroomSession extractRecording(Node node) throws VirtualClassroomException {

      VirtualClassroomSession vcs = new VirtualClassroomSession();
      vcs.setElluminateRecordingId(getNodeValue("Id", node));
      String moderatorId = getNodeValue("Facilitator", node);
      if (moderatorId != null && moderatorId.length() > 0) {
         vcs.setElluminateModeratorId(moderatorId);
      }
      vcs.setName(getNodeValue("RoomName", node));
      String meetingId = getNodeValue("MeetingRoomId", node);
      vcs.setElluminateId(Long.parseLong(meetingId));
      vcs.setStartDate(new Date(Long.parseLong(getNodeValue("CreationDate", node))));

      return vcs;
   }

   /**
    * extract a list of url's from the xml document returned from the elluminate server after executing the getRecordingsJNLP command.
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the url's returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return  the parsed virtual classroom session recording url's.
    */
   public  List extractRecordingsJNLPResult(SOAPBody body) throws VirtualClassroomException {
      Vector recordingUrls = new Vector();
      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to read result   " + extractErrorMessage(body.getFault()));
      }
      // todo: implement this method
      return recordingUrls;
   }

   /**
    * extracts the time zone of the machine on which the elluminate server is running from the xml document returned from the elluminate server
    * after executing the serverTimeZone() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * <?xml version="1.0" encoding="UTF-8"?>
    * <results>
    *    <timezone>[server time zone]</timezone>
    * </results>
    * </code>
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the time zone returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return String  time zone of the machine on which the elluminate server is running
    */
   public  String extractServerTimeZoneResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractServerTimeZoneResult()");

      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to read result   " + extractErrorMessage(body.getFault()));
      }

      return null;
   }

   /**
    * extracts the return value from the xml document returned from the elluminate server after executing the setFacilitator() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * <results>
    *    <meeting>
    *       <id>1151074405191</id>
    *       <name>vc1</name>
    *       <startDate>23/06/2006 07:15:00 MST</startDate>
    *       <endDate>23/06/2006 09:15:00 MST</endDate>
    *       <private>true</private>
    *    </meeting>
    * </results>
    * </code>
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    */
   public  void extractSetFacilitatorResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractSetFacilitatorResult()");
      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to read result   " + extractErrorMessage(body.getFault()));
      }

   }

   /**
    * extracts the boolean return value from the xml document returned from the elluminate server after executing the testElm() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * <?xml version="1.0" encoding="UTF-8"?>
    * <results>
    *    <success>true</success>
    *    <version>[adapter version]</version>
    * </results>
    * </code>
    * <br/><br/>
    * where <i>adapter version</i> is the current code revision of the adapter.
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return boolean  whether the elluminate server was able to be pinged or not.
    */
   public  boolean extractTestElmResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractTestElmResult()");
      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to read result   " + extractErrorMessage(body.getFault()));
      }
      return true;
   }

   /**
    * extracts the meeting values from the xml document returned from the elluminate server after executing the updateMeeting() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * if the elluminate server can update the meeting it will return xml in the form of:
    *
    * <results>
    *    <meeting>
    *       <id>[meeting id]</id>
    *       <name>jonerics_meeting</name>
    *       <startDate>13/04/2006 09:00:00 MST</startDate>
    *       <endDate>13/04/2006 10:00:00 MST</endDate>
    *       <private>true</private>
    *    </meeting>
    * </results>
    * </code>
    * where <i>meeting id</i> is the unique id generated by the elluminate server when creating the meeting.
    *
    * otherwise, if the elluminate server fails to update the meeting, it will return xml an error message.
    * see extractErrorMessage for the format of the xml response.
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the elluminate live virtual classroom server could not update the meeting.
    *                                     If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return VirtualClassroomSession  the newly updated meeting.
    */
   public  VirtualClassroomSession extractUpdateMeetingResult(SOAPBody body) throws VirtualClassroomException {
      logger.info("extractUpdateMeetingResult()");

      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to read result   " + extractErrorMessage(body.getFault()));
      }

      return extractMeeting(body);
   }

   /**
    * extracts the url to view an ellumninate recorded meeting from the xml document returned from the elluminate server after executing the createRecordingUrl() command.
    * the xml response is expected to have the following structure:
    * <br/><br/>
    * <code>
    * <?xml version="1.0" encoding="UTF-8"?>
    * <results></results>
    * </code>
    * <br/><br/>
    * @param document  jdom document containing the xml from which the return value is to be parsed.
    * <br/><br/>
    * @throws VirtualClassroomException   If the result returned by the elluminate server can not be parsed into a valid xml document,
    *                                     an XmlException will be nested inside and can be retrieved with the getCause() method.
    * <br/><br/>
    * @return String  url to view the recorded meeting.
    */
   public  String extractViewMeetingUrlResult(SOAPBody body) throws VirtualClassroomException {
      return extractJoinMeetingUrlResult(body);
   }

	protected   List selectNodes(String expression, Object doc) {
		if (doc == null) return new ArrayList();
		List nodes = null;
		try {
			XPath xpath = new DOMXPath(expression);
			nodes = xpath.selectNodes(doc);
		} catch (JaxenException e) {
			return null;
		}
		return nodes;
	}

	protected   Node selectNode(String expression, Object doc) {
		if (doc == null) return null;
		Object node = null;
		try {
			XPath xpath = new DOMXPath(expression);
			node = xpath.selectSingleNode(doc);
		} catch (JaxenException e) {
			return null;
		}
		return (Node)node;
	}

	protected   String getNodeValue(String expression, Node node) {
		if (node == null) return "";
		String value = null;
		try {
			XPath xpath = new DOMXPath(expression);
			value = xpath.stringValueOf(node);
		} catch (JaxenException e) {
			return null;
		}
		return value;
	}
    
    public boolean extractResult(SOAPBody body) throws VirtualClassroomException{
      logger.info("extractIsParticipantResult()");
      if (body.hasFault()) {
         throw new VirtualClassroomException("Unable to read result   " + extractErrorMessage(body.getFault()));
      }
      return Boolean.valueOf(getNodeValue("//Results", body));
    }

    /**
     * <Results><ParticipantListAdapter><MeetingId>1245877207740</MeetingId><Participants>
     * <Map><Entry><Key>1231185041343</Key><Value><ParticipantAdapter><User><UserAdapter><Id>1231185041343</Id><LoginName>admin</LoginName>
     * <LoginPassword /><FirstName>Sakai</FirstName><LastName>Administrator</LastName><Email>poop@asdf.com</Email><Deleted>false</Deleted>
     * <Role><RoleAdapter><RoleId>2</RoleId></RoleAdapter></Role></UserAdapter></User>
     * <Role><RoleAdapter><RoleId>2</RoleId></RoleAdapter></Role></ParticipantAdapter></Value>
     * </Entry></Map></Participants></ParticipantListAdapter>
     * </Results>
     * @param body
     * @return
     * @throws VirtualClassroomException
     */
    public Map<String, String> extractListParticipantsResult(SOAPBody body) throws VirtualClassroomException{
        logger.info("extractListParticipantsResult()");
        if (body.hasFault()) {
           throw new VirtualClassroomException("Unable to read result   " + extractErrorMessage(body.getFault()));
        }
        Map participants = new HashMap();
        for (Iterator i=selectNodes("//Entry", body).iterator();i.hasNext();) {
           Node node =(Node) i.next();
           String userId = getNodeValue("//Id", node);
           String roleId = getNodeValue("//RoleId", node);
           participants.put(userId, roleId);
        }

        return participants;
    }
   
}
